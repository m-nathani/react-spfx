{"version":3,"sources":["webparts/dashboard/DashboardWebPart.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+B;AAC/B,kDAAsC;AACtC,8DAAqD;AACrD,8DAIoC;AAEpC,+DAAmD;AACnD,qEAA+C;AAO/C;IAA8C,oCAE7C;IAFD;;IA2CA,CAAC;IAxCQ,iCAAM,GAAb;QACE,IAAM,OAAO,GAAwC,KAAK,CAAC,aAAa,CACtE,mBAAS,EACT;YACE,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;SACzC,CACF,CAAC;QAEF,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAES,oCAAS,GAAnB;QACE,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,sBAAc,yCAAW;aAAzB;YACE,OAAO,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;;;OAAA;IAES,uDAA4B,GAAtC;QACE,OAAO;YACL,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE;wBACN,WAAW,EAAE,OAAO,CAAC,uBAAuB;qBAC7C;oBACD,MAAM,EAAE;wBACN;4BACE,SAAS,EAAE,OAAO,CAAC,cAAc;4BACjC,WAAW,EAAE;gCACX,uCAAqB,CAAC,aAAa,EAAE;oCACnC,KAAK,EAAE,OAAO,CAAC,qBAAqB;iCACrC,CAAC;6BACH;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CA3CA,AA2CC,CA3C6C,uCAAqB,GA2ClE","file":"webparts/dashboard/DashboardWebPart.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { Version } from '@microsoft/sp-core-library';\nimport {\n  BaseClientSideWebPart,\n  IPropertyPaneConfiguration,\n  PropertyPaneTextField\n} from '@microsoft/sp-webpart-base';\n\nimport * as strings from 'DashboardWebPartStrings';\nimport Dashboard from './components/Dashboard';\nimport { IDashboardProps } from './components/IDashboardProps';\n\nexport interface IDashboardWebPartProps {\n  description: string;\n}\n\nexport default class DashboardWebPart extends BaseClientSideWebPart<\n  IDashboardWebPartProps\n> {\n  public render(): void {\n    const element: React.ReactElement<IDashboardProps> = React.createElement(\n      Dashboard,\n      {\n        description: this.properties.description\n      }\n    );\n\n    ReactDom.render(element, this.domElement);\n  }\n\n  protected onDispose(): void {\n    ReactDom.unmountComponentAtNode(this.domElement);\n  }\n\n  protected get dataVersion(): Version {\n    return Version.parse('1.0');\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                PropertyPaneTextField('description', {\n                  label: strings.DescriptionFieldLabel\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n"],"sourceRoot":"../../../src"}