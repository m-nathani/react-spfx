{"version":3,"sources":["components/authorization/Authorization.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+B;AAG/B,8EAAwD;AAGxD,IAAM,iBAAiB,GAAG,UAAmB,SAAkC;IAC7E;QAAgC,qCAAuC;QACrE,2BAAY,KAA8B;YAA1C,YACE,kBAAM,KAAK,CAAC,SACb;YAMe,WAAK,GAAG;gBACtB,YAAY,EAAE,KAAK;aACpB,CAAA;;QARD,CAAC;QAEM,wCAAY,GAAnB;QAEA,CAAC;QAMM,kCAAM,GAAb;YACE,IAAQ,8BAA8C,CAAC;YAC/C,IAAA,sCAAY,CAAgB;YACpC,OAAO,YAAY,CAAC,CAAC,CAAC,oBAAC,sBAAY,OAAG,CAAC,CAAC,CAAC,oBAAC,SAAS,eAAK,KAAK,EAAI,CAAC;QACpE,CAAC;QACH,wBAAC;IAAD,CAlBA,AAkBC,CAlB+B,KAAK,CAAC,SAAS;AAA/C,CAkBC,CAAC;AAEJ,kBAAe,iBAAiB,CAAC","file":"components/authorization/Authorization.js","sourcesContent":["import * as React from 'react';\n\nimport { IAuthorizationProps, IAuthorizationState } from './IAuthorization';\nimport Unauthorized from '../unauthorized/Unauthorized';\nimport { auth } from '../../services';\n\nconst withAuthorization = <P extends object>(Component: React.ComponentClass<P>) =>\n  class withAuthorization extends React.Component<P, IAuthorizationState> {\n    constructor(props: P & IAuthorizationProps) {\n      super(props);\n    }\n\n    public onInitialize() {\n\n    }\n\n    public readonly state = {\n      isAuthorized: false,\n    }\n\n    public render(): React.ReactElement<P & IAuthorizationProps> {\n      const { ...props } = this.props as IAuthorizationProps;\n      const { isAuthorized } = this.state;\n      return isAuthorized ? <Unauthorized /> : <Component {...props} />;\n    }\n  };\n\nexport default withAuthorization;\n"],"sourceRoot":"../../../src"}