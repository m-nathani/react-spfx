{"version":3,"sources":["services/api/HttpRequest.ts"],"names":[],"mappings":"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","file":"services/api/HttpRequest.js","sourcesContent":["import axios, { AxiosInstance, AxiosPromise, AxiosRequestConfig, AxiosInterceptorManager, AxiosResponse } from 'axios';\n\nconst axiosInstance: AxiosInstance = axios.create({\n  baseURL: 'www.abc.com/api'\n});\n\naxiosInstance.interceptors.request.use(\n  (config: AxiosRequestConfig): AxiosRequestConfig | Promise<AxiosRequestConfig> => {\n    // Do something before request is sent\n    return config;\n  },\n  error => {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\naxiosInstance.interceptors.response.use(\n  (response: AxiosResponse): AxiosResponse | Promise<AxiosResponse> => {\n    // Do something with response data\n    return response;\n  },\n  error => {\n    // Do something with response error\n    return Promise.reject(error);\n  }\n);\n\nclass HttpRequest {\n  public axios: AxiosInstance;\n  constructor() {\n    this.axios = axiosInstance;\n  }\n\n  public setHeader(header: any) {\n    this.axios.defaults.headers.common[header.key] = header.value;\n    this.axios.defaults.headers.post['Content-Type'] =\n      'application/x-www-form-urlencoded';\n  }\n\n  public fetch<T = any>(methodName: string, config: AxiosRequestConfig): AxiosPromise<T> {\n    const { data } = config;\n    return this.axios.get(methodName, {\n      params: data\n    });\n  }\n\n  public create<T = any>(methodName: string, config: AxiosRequestConfig): AxiosPromise<T> {\n    const { data } = config;\n    return this.axios.post(methodName, data);\n  }\n\n  public update<T = any>(methodName: string, config: AxiosRequestConfig): AxiosPromise<T> {\n    const { data } = config;\n    return this.axios.put(methodName, data);\n  }\n\n  public patch<T = any>(methodName: string, config: AxiosRequestConfig): AxiosPromise<T> {\n    const { data } = config;\n    return this.axios.patch(methodName, data);\n  }\n\n  public delete(methodName: string, config  : AxiosRequestConfig): AxiosPromise {\n    const { data } = config;\n    return this.axios.delete(methodName, { params: { id: data } });\n  }\n\n  public request<T = any>(type: string, url: string, config: AxiosRequestConfig): AxiosPromise<T> {\n    const { data } = config;\n    let promise: AxiosPromise<T>;\n    switch (type) {\n      case 'GET':\n        promise = axios.get(url, { params: data });\n        break;\n      case 'POST':\n        promise = axios.post(url, data);\n        break;\n      case 'PUT':\n        promise = axios.put(url, data);\n        break;\n      case 'PATCH':\n        promise = axios.patch(url, data);\n        break;\n      case 'DELETE':\n        promise = axios.delete(url, data);\n        break;\n      default:\n        promise = axios.get(url, { params: data });\n        break;\n    }\n    return promise;\n  }\n}\n\nexport default HttpRequest;\n"],"sourceRoot":"../../../src"}